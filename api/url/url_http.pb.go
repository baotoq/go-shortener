// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             v5.29.2
// source: url/url.proto

package url

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUrlCreateUrl = "/url.Url/CreateUrl"
const OperationUrlGetUrl = "/url.Url/GetUrl"

type UrlHTTPServer interface {
	CreateUrl(context.Context, *CreateUrlRequest) (*CreateUrlResponse, error)
	GetUrl(context.Context, *GetUrlRequest) (*GetUrlResponse, error)
}

func RegisterUrlHTTPServer(s *http.Server, srv UrlHTTPServer) {
	r := s.Route("/")
	r.POST("/url", _Url_CreateUrl0_HTTP_Handler(srv))
	r.GET("/url/{shortened_url}", _Url_GetUrl0_HTTP_Handler(srv))
}

func _Url_CreateUrl0_HTTP_Handler(srv UrlHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateUrlRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUrlCreateUrl)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUrl(ctx, req.(*CreateUrlRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateUrlResponse)
		return ctx.Result(200, reply)
	}
}

func _Url_GetUrl0_HTTP_Handler(srv UrlHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUrlRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUrlGetUrl)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUrl(ctx, req.(*GetUrlRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUrlResponse)
		return ctx.Result(200, reply)
	}
}

type UrlHTTPClient interface {
	CreateUrl(ctx context.Context, req *CreateUrlRequest, opts ...http.CallOption) (rsp *CreateUrlResponse, err error)
	GetUrl(ctx context.Context, req *GetUrlRequest, opts ...http.CallOption) (rsp *GetUrlResponse, err error)
}

type UrlHTTPClientImpl struct {
	cc *http.Client
}

func NewUrlHTTPClient(client *http.Client) UrlHTTPClient {
	return &UrlHTTPClientImpl{client}
}

func (c *UrlHTTPClientImpl) CreateUrl(ctx context.Context, in *CreateUrlRequest, opts ...http.CallOption) (*CreateUrlResponse, error) {
	var out CreateUrlResponse
	pattern := "/url"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUrlCreateUrl))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UrlHTTPClientImpl) GetUrl(ctx context.Context, in *GetUrlRequest, opts ...http.CallOption) (*GetUrlResponse, error) {
	var out GetUrlResponse
	pattern := "/url/{shortened_url}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUrlGetUrl))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
