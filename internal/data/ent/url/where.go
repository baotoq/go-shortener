// Code generated by ent, DO NOT EDIT.

package url

import (
	"go-shortener/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Url {
	return predicate.Url(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Url {
	return predicate.Url(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Url {
	return predicate.Url(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Url {
	return predicate.Url(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Url {
	return predicate.Url(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Url {
	return predicate.Url(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Url {
	return predicate.Url(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Url {
	return predicate.Url(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Url {
	return predicate.Url(sql.FieldLTE(FieldID, id))
}

// OriginalURL applies equality check predicate on the "original_url" field. It's identical to OriginalURLEQ.
func OriginalURL(v string) predicate.Url {
	return predicate.Url(sql.FieldEQ(FieldOriginalURL, v))
}

// ShortenedURL applies equality check predicate on the "shortened_url" field. It's identical to ShortenedURLEQ.
func ShortenedURL(v string) predicate.Url {
	return predicate.Url(sql.FieldEQ(FieldShortenedURL, v))
}

// OriginalURLEQ applies the EQ predicate on the "original_url" field.
func OriginalURLEQ(v string) predicate.Url {
	return predicate.Url(sql.FieldEQ(FieldOriginalURL, v))
}

// OriginalURLNEQ applies the NEQ predicate on the "original_url" field.
func OriginalURLNEQ(v string) predicate.Url {
	return predicate.Url(sql.FieldNEQ(FieldOriginalURL, v))
}

// OriginalURLIn applies the In predicate on the "original_url" field.
func OriginalURLIn(vs ...string) predicate.Url {
	return predicate.Url(sql.FieldIn(FieldOriginalURL, vs...))
}

// OriginalURLNotIn applies the NotIn predicate on the "original_url" field.
func OriginalURLNotIn(vs ...string) predicate.Url {
	return predicate.Url(sql.FieldNotIn(FieldOriginalURL, vs...))
}

// OriginalURLGT applies the GT predicate on the "original_url" field.
func OriginalURLGT(v string) predicate.Url {
	return predicate.Url(sql.FieldGT(FieldOriginalURL, v))
}

// OriginalURLGTE applies the GTE predicate on the "original_url" field.
func OriginalURLGTE(v string) predicate.Url {
	return predicate.Url(sql.FieldGTE(FieldOriginalURL, v))
}

// OriginalURLLT applies the LT predicate on the "original_url" field.
func OriginalURLLT(v string) predicate.Url {
	return predicate.Url(sql.FieldLT(FieldOriginalURL, v))
}

// OriginalURLLTE applies the LTE predicate on the "original_url" field.
func OriginalURLLTE(v string) predicate.Url {
	return predicate.Url(sql.FieldLTE(FieldOriginalURL, v))
}

// OriginalURLContains applies the Contains predicate on the "original_url" field.
func OriginalURLContains(v string) predicate.Url {
	return predicate.Url(sql.FieldContains(FieldOriginalURL, v))
}

// OriginalURLHasPrefix applies the HasPrefix predicate on the "original_url" field.
func OriginalURLHasPrefix(v string) predicate.Url {
	return predicate.Url(sql.FieldHasPrefix(FieldOriginalURL, v))
}

// OriginalURLHasSuffix applies the HasSuffix predicate on the "original_url" field.
func OriginalURLHasSuffix(v string) predicate.Url {
	return predicate.Url(sql.FieldHasSuffix(FieldOriginalURL, v))
}

// OriginalURLEqualFold applies the EqualFold predicate on the "original_url" field.
func OriginalURLEqualFold(v string) predicate.Url {
	return predicate.Url(sql.FieldEqualFold(FieldOriginalURL, v))
}

// OriginalURLContainsFold applies the ContainsFold predicate on the "original_url" field.
func OriginalURLContainsFold(v string) predicate.Url {
	return predicate.Url(sql.FieldContainsFold(FieldOriginalURL, v))
}

// ShortenedURLEQ applies the EQ predicate on the "shortened_url" field.
func ShortenedURLEQ(v string) predicate.Url {
	return predicate.Url(sql.FieldEQ(FieldShortenedURL, v))
}

// ShortenedURLNEQ applies the NEQ predicate on the "shortened_url" field.
func ShortenedURLNEQ(v string) predicate.Url {
	return predicate.Url(sql.FieldNEQ(FieldShortenedURL, v))
}

// ShortenedURLIn applies the In predicate on the "shortened_url" field.
func ShortenedURLIn(vs ...string) predicate.Url {
	return predicate.Url(sql.FieldIn(FieldShortenedURL, vs...))
}

// ShortenedURLNotIn applies the NotIn predicate on the "shortened_url" field.
func ShortenedURLNotIn(vs ...string) predicate.Url {
	return predicate.Url(sql.FieldNotIn(FieldShortenedURL, vs...))
}

// ShortenedURLGT applies the GT predicate on the "shortened_url" field.
func ShortenedURLGT(v string) predicate.Url {
	return predicate.Url(sql.FieldGT(FieldShortenedURL, v))
}

// ShortenedURLGTE applies the GTE predicate on the "shortened_url" field.
func ShortenedURLGTE(v string) predicate.Url {
	return predicate.Url(sql.FieldGTE(FieldShortenedURL, v))
}

// ShortenedURLLT applies the LT predicate on the "shortened_url" field.
func ShortenedURLLT(v string) predicate.Url {
	return predicate.Url(sql.FieldLT(FieldShortenedURL, v))
}

// ShortenedURLLTE applies the LTE predicate on the "shortened_url" field.
func ShortenedURLLTE(v string) predicate.Url {
	return predicate.Url(sql.FieldLTE(FieldShortenedURL, v))
}

// ShortenedURLContains applies the Contains predicate on the "shortened_url" field.
func ShortenedURLContains(v string) predicate.Url {
	return predicate.Url(sql.FieldContains(FieldShortenedURL, v))
}

// ShortenedURLHasPrefix applies the HasPrefix predicate on the "shortened_url" field.
func ShortenedURLHasPrefix(v string) predicate.Url {
	return predicate.Url(sql.FieldHasPrefix(FieldShortenedURL, v))
}

// ShortenedURLHasSuffix applies the HasSuffix predicate on the "shortened_url" field.
func ShortenedURLHasSuffix(v string) predicate.Url {
	return predicate.Url(sql.FieldHasSuffix(FieldShortenedURL, v))
}

// ShortenedURLEqualFold applies the EqualFold predicate on the "shortened_url" field.
func ShortenedURLEqualFold(v string) predicate.Url {
	return predicate.Url(sql.FieldEqualFold(FieldShortenedURL, v))
}

// ShortenedURLContainsFold applies the ContainsFold predicate on the "shortened_url" field.
func ShortenedURLContainsFold(v string) predicate.Url {
	return predicate.Url(sql.FieldContainsFold(FieldShortenedURL, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Url) predicate.Url {
	return predicate.Url(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Url) predicate.Url {
	return predicate.Url(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Url) predicate.Url {
	return predicate.Url(sql.NotPredicates(p))
}
